
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  storeId: 'storeId',
  deliveryId: 'deliveryId',
  status: 'status',
  subTotal: 'subTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cityId: 'cityId',
  deliveryDate: 'deliveryDate'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  id_almacen: 'id_almacen',
  name: 'name',
  address: 'address',
  userId: 'userId',
  latitude: 'latitude',
  longitude: 'longitude',
  cityId: 'cityId',
  capacity: 'capacity',
  zipCode: 'zipCode',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  departmentId: 'departmentId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  id_producto: 'id_producto',
  id_proveedor: 'id_proveedor',
  name: 'name',
  description: 'description',
  sku: 'sku',
  categoryId: 'categoryId',
  unitPrice: 'unitPrice',
  weight: 'weight',
  isFragile: 'isFragile',
  dimensionsCm: 'dimensionsCm',
  imageUrl: 'imageUrl',
  barCode: 'barCode',
  requiredRefrigeration: 'requiredRefrigeration',
  dateOfExpiration: 'dateOfExpiration',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  storeId: 'storeId',
  availableQuantity: 'availableQuantity',
  minimumThreshold: 'minimumThreshold',
  lastResetDate: 'lastResetDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistoricalMovementScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  user: 'user',
  movementDate: 'movementDate',
  reason: 'reason',
  movementType: 'movementType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderEventScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  status: 'status',
  date: 'date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.OrdersOrderByRelevanceFieldEnum = {
  customerId: 'customerId',
  address: 'address',
  deliveryId: 'deliveryId'
};

exports.Prisma.StoreOrderByRelevanceFieldEnum = {
  id_almacen: 'id_almacen',
  name: 'name',
  address: 'address',
  userId: 'userId'
};

exports.Prisma.CityOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DepartmentOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id_producto: 'id_producto',
  id_proveedor: 'id_proveedor',
  name: 'name',
  description: 'description',
  sku: 'sku',
  dimensionsCm: 'dimensionsCm',
  imageUrl: 'imageUrl',
  barCode: 'barCode'
};

exports.Prisma.HistoricalMovementOrderByRelevanceFieldEnum = {
  user: 'user',
  reason: 'reason'
};

exports.Prisma.OrderEventOrderByRelevanceFieldEnum = {
  status: 'status'
};
exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  CANCELED: 'CANCELED',
  ONTHEWAY: 'ONTHEWAY',
  DELIVERED: 'DELIVERED'
};

exports.statusStore = exports.$Enums.statusStore = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.statusProduct = exports.$Enums.statusProduct = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.MovementType = exports.$Enums.MovementType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.Prisma.ModelName = {
  Orders: 'Orders',
  OrderItem: 'OrderItem',
  Store: 'Store',
  City: 'City',
  Department: 'Department',
  Category: 'Category',
  Product: 'Product',
  Inventory: 'Inventory',
  HistoricalMovement: 'HistoricalMovement',
  OrderEvent: 'OrderEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
